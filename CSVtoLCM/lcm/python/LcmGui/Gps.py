"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import LcmGui.Header

class Gps(object):
    __slots__ = ["header", "latitude_deg", "longitude_deg", "altitude_m"]

    def __init__(self):
        self.header = LcmGui.Header()
        self.latitude_deg = 0.0
        self.longitude_deg = 0.0
        self.altitude_m = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(Gps._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.header._get_packed_fingerprint() == LcmGui.Header._get_packed_fingerprint()
        self.header._encode_one(buf)
        buf.write(struct.pack(">ddd", self.latitude_deg, self.longitude_deg, self.altitude_m))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Gps._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Gps._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Gps()
        self.header = LcmGui.Header._decode_one(buf)
        self.latitude_deg, self.longitude_deg, self.altitude_m = struct.unpack(">ddd", buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if Gps in parents: return 0
        newparents = parents + [Gps]
        tmphash = (0x8532dafbe3364312+ LcmGui.Header._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Gps._packed_fingerprint is None:
            Gps._packed_fingerprint = struct.pack(">Q", Gps._get_hash_recursive([]))
        return Gps._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

