/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package LcmGui;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class Pva implements lcm.lcm.LCMEncodable
{
    public LcmGui.Header header;
    public double latitude;
    public double longitude;
    public double altitude_m;
    public double velocity[];
    public double attitude;
 
    public Pva()
    {
        velocity = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x156388e5d77a88e5L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(LcmGui.Pva.class))
            return 0L;
 
        classes.add(LcmGui.Pva.class);
        long hash = LCM_FINGERPRINT_BASE
             + LcmGui.Header._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        this.header._encodeRecursive(outs); 
 
        outs.writeDouble(this.latitude); 
 
        outs.writeDouble(this.longitude); 
 
        outs.writeDouble(this.altitude_m); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.velocity[a]); 
        }
 
        outs.writeDouble(this.attitude); 
 
    }
 
    public Pva(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public Pva(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static LcmGui.Pva _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        LcmGui.Pva o = new LcmGui.Pva();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.header = LcmGui.Header._decodeRecursiveFactory(ins);
 
        this.latitude = ins.readDouble();
 
        this.longitude = ins.readDouble();
 
        this.altitude_m = ins.readDouble();
 
        this.velocity = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.velocity[a] = ins.readDouble();
        }
 
        this.attitude = ins.readDouble();
 
    }
 
    public LcmGui.Pva copy()
    {
        LcmGui.Pva outobj = new LcmGui.Pva();
        outobj.header = this.header.copy();
 
        outobj.latitude = this.latitude;
 
        outobj.longitude = this.longitude;
 
        outobj.altitude_m = this.altitude_m;
 
        outobj.velocity = new double[(int) 3];
        System.arraycopy(this.velocity, 0, outobj.velocity, 0, 3); 
        outobj.attitude = this.attitude;
 
        return outobj;
    }
 
}

